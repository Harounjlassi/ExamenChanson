// <auto-generated />
using System;
using Exam.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Exam.Infrastructure.Migrations
{
    [DbContext(typeof(ExamContext))]
    [Migration("20250430231037_base2")]
    partial class base2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationCore.Domain.Artiste", b =>
                {
                    b.Property<int>("ArtisteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArtisteId"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nationalite")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ArtisteId");

                    b.ToTable("Artiste");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Chanson", b =>
                {
                    b.Property<int>("ChansonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChansonId"));

                    b.Property<int>("ArtisteFk")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateSortie")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duree")
                        .HasColumnType("int");

                    b.Property<int>("StyleMusic")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("VuesYoutube")
                        .HasColumnType("int");

                    b.HasKey("ChansonId");

                    b.HasIndex("ArtisteFk");

                    b.ToTable("Chanson");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Concert", b =>
                {
                    b.Property<DateTime>("DateConcert")
                        .HasColumnType("datetime2");

                    b.Property<int>("FestivalFk")
                        .HasColumnType("int");

                    b.Property<int>("ArtisteFk")
                        .HasColumnType("int");

                    b.Property<double>("Cachet")
                        .HasColumnType("float");

                    b.Property<int>("Duree")
                        .HasColumnType("int");

                    b.HasKey("DateConcert", "FestivalFk", "ArtisteFk");

                    b.HasIndex("ArtisteFk");

                    b.HasIndex("FestivalFk");

                    b.ToTable("Concert");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Festival", b =>
                {
                    b.Property<int>("FestivalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FestivalId"));

                    b.Property<int>("Capacite")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FestivalId");

                    b.ToTable("Festival");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Chanson", b =>
                {
                    b.HasOne("ApplicationCore.Domain.Artiste", "Artiste")
                        .WithMany("chansons")
                        .HasForeignKey("ArtisteFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artiste");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Concert", b =>
                {
                    b.HasOne("ApplicationCore.Domain.Artiste", "Artiste")
                        .WithMany("concerts")
                        .HasForeignKey("ArtisteFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Domain.Festival", "Festival")
                        .WithMany("concerts")
                        .HasForeignKey("FestivalFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artiste");

                    b.Navigation("Festival");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Artiste", b =>
                {
                    b.Navigation("chansons");

                    b.Navigation("concerts");
                });

            modelBuilder.Entity("ApplicationCore.Domain.Festival", b =>
                {
                    b.Navigation("concerts");
                });
#pragma warning restore 612, 618
        }
    }
}
